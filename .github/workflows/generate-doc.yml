name: Generate Commit Log

on:
  push:
    tags:
      - 'v*'  # Only triggers on tags starting with 'v'

jobs:
  generate-commit-log:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests
          pip install GitPython
          pip install PyGithub
          pip install weasyprint

      - name: Create the generated_docs directory
        run: mkdir -p generated_docs

      - name: Run the commit log generation script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          TAG_NAME: ${{ github.ref_name }}
        run: python .github/scripts/changelogs/main.py

#      - name: Use Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '16'
#
#      - name: Install Puppeteer
#        run: |
#          npm init -y
#          npm install puppeteer
#
#      - name: Convert HTML to PDF
#        run: |
#          mkdir -p generated_docs/pdf_docs
#          node <<EOF
#          const fs = require('fs');
#          const path = require('path');
#          const puppeteer = require('puppeteer');
#
#          (async () => {
#            const browser = await puppeteer.launch();
#            const htmlDir = path.resolve('generated_docs');
#            const pdfDir = path.resolve('generated_docs/pdf_docs');
#
#            if (!fs.existsSync(pdfDir)) {
#              fs.mkdirSync(pdfDir, { recursive: true });
#            }
#
#            const files = fs.readdirSync(htmlDir).filter(file => file.endsWith('.html'));
#
#            if (files.length === 0) {
#              console.log('No HTML files found to convert.');
#            } else {
#              for (const file of files) {
#                const filePath = path.join(htmlDir, file);
#                const outputFilePath = path.join(pdfDir, file.replace('.html', '.pdf'));
#
#                console.log(`Processing: ${filePath}`);
#                const page = await browser.newPage();
#                await page.goto('file://' + filePath, { waitUntil: 'networkidle0' });
#
#                await page.pdf({
#                  path: outputFilePath,
#                  format: 'A4',
#                  printBackground: true,
#                });
#
#                console.log(`Generated PDF: ${outputFilePath}`);
#                await page.close();
#              }
#            }
#
#            await browser.close();
#          })();
#          EOF

      - name: Upload Generated PDFs
        uses: actions/upload-artifact@v3
        with:
          name: Converted PDFs
          path: generated_docs/*


      - name: Generate dynamic email template
        env:
          REPO_NAME: ${{ github.event.repository.name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_ACTOR: ${{ github.actor }}
          TAG_NAME: ${{ github.ref_name }}
        run: python .github/scripts/automatic_email/main.py

      - name: Send email
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          from: GitHub Actions <no-reply@github.com>
          to: abdelghaniyacine.barka@outlook.com
          subject: GitHub Actions Notification
          html_body: file://.github/scripts/automatic_email/email_output.html




