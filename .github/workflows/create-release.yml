name: Create release

on:
  push:
    branches:
      - main  # Trigger on push to main branch

permissions:
  contents: write

jobs:
  release:
    name: Release on push to main
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate Unique Tag
        id: create_tag
        run: |
          # Generate a tag based on the current timestamp
          TAG="v$(date +'%Y.%m.%d.%H%M%S')"
          
          # Check if the tag already exists remotely
          if gh release view "$TAG" --repo="$GITHUB_REPOSITORY" > /dev/null 2>&1; then
            echo "Tag $TAG already exists remotely. Exiting..."
            exit 1
          fi

          # Create and push the tag to remote
          git tag $TAG
          git push origin $TAG
          echo "::set-output name=tag::$TAG"  # Pass tag as an output

      - name: Get Previous Tag (Handle empty repo gracefully)
        id: get_previous_tag
        run: |
          # Get the previous tag name (e.g., v2024.11.28.140000)
          TAGS=$(git tag -l)
          
          if [ -z "$TAGS" ]; then
            # If there are no tags, set a flag and leave the changelog empty
            echo "::set-output name=previous_tag::"
            echo "::set-output name=is_first_release::true"
          else
            # Get the previous tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0)
            echo "::set-output name=previous_tag::$PREVIOUS_TAG"
            echo "::set-output name=is_first_release::false"
          fi

      - name: Generate Changelog Dynamically
        id: generate_changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.create_tag.outputs.tag }}  # Get the tag from previous step
        run: |
          # Get the previous tag from the output of the previous step
          PREVIOUS_TAG="${{ steps.get_previous_tag.outputs.previous_tag }}"
          IS_FIRST_RELEASE="${{ steps.get_previous_tag.outputs.is_first_release }}"

          if [ "$IS_FIRST_RELEASE" == "true" ]; then
            # If it's the first release, display a message indicating it's the first release
            changelog="### What's Changed\nNo previous release found. This is the first release."
          else
            # If there are previous tags, get the commit messages between the previous tag and the current tag
            COMMITS=$(git log --pretty=format:"%s" "$PREVIOUS_TAG".."$tag")

            # Initialize changelog
            changelog="### What's Changed\n"

            # Loop over commits and filter by type (e.g., feat, style, etc.)
            for commit in $COMMITS; do
              # Check for commit types (e.g., feat, style)
              if [[ $commit =~ ^(feat|style|fix|docs|chore)\((.*)\):\ (.*) ]]; then
                type=${BASH_REMATCH[1]}  # commit type (feat, style, etc.)
                scope=${BASH_REMATCH[2]}  # scope of the change (e.g., API, GitHub)
                description=${BASH_REMATCH[3]}  # commit description
                changelog+="$type($scope): $description by @${GITHUB_ACTOR} in #${GITHUB_SHA}\n"
              else
                changelog+="$commit by @${GITHUB_ACTOR} in #${GITHUB_SHA}\n"
              fi
            done
          fi

          # Save changelog to output
          echo "::set-output name=changelog::$changelog"

      - name: Create Release with Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          changelog: ${{ steps.generate_changelog.outputs.changelog }}
          tag: ${{ steps.create_tag.outputs.tag }}  # Tag from the previous step
        run: |
          # Create the release with the dynamically generated changelog
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --notes "$changelog"  # Use dynamically generated changelog